import { cardanoCliCommand, commandFunction } from './command';
export const cardanoCli = (cliPath) => ({
    address: cardanoCliCommand('address', {
        build: commandFunction('build'),
        info: commandFunction('info'),
        keyGen: commandFunction('keyGen'),
        keyHash: commandFunction('keyHash'),
    })(cliPath),
    genesis: cardanoCliCommand('genesis', {
        keyGenGenesis: commandFunction('keyGenGenesis'),
        keyGenDelegate: commandFunction('keyGenDelegate'),
        keyGenUtxo: commandFunction('keyGenUtxo'),
        keyHash: commandFunction('keyHash'),
        getVerKey: commandFunction('getVerKey'),
        initialAddr: commandFunction('initialAddr'),
        initialTxin: commandFunction('initialTxin'),
        create: commandFunction('create'),
        createStaked: commandFunction('createStaked'),
        hash: commandFunction('hash'),
    })(cliPath),
    governance: cardanoCliCommand('governance', {
        createMirCertificate: commandFunction('createMirCertificate'),
        createGenesisKeyDelegationCertificate: commandFunction('createGenesisKeyDelegationCertificate'),
        createUpdateProposal: commandFunction('createUpdateProposal'),
    })(cliPath),
    key: cardanoCliCommand('key', {
        verificationKey: commandFunction('verificationKey'),
        nonExtendedKey: commandFunction('nonExtendedKey'),
        convertByronKey: commandFunction('convertByronKey'),
        convertByronGenesisVkey: commandFunction('convertByronGenesisVkey'),
        convertItnKey: commandFunction('convertItnKey'),
        convertItnExtendedKey: commandFunction('convertItnExtendedKey'),
        convertItnBip32Key: commandFunction('convertItnBip32Key'),
        convertCardanoAddressKey: commandFunction('convertCardanoAddressKey'),
    })(cliPath),
    node: cardanoCliCommand('node', {
        keyGen: commandFunction('keyGen'),
        keyGenKes: commandFunction('keyGenKes'),
        keyGenVrf: commandFunction('keyGenVrf'),
        keyHashVrf: commandFunction('keyHashVrf'),
        newCounter: commandFunction('newCounter'),
        issueOpCert: commandFunction('issueOpCert'),
    })(cliPath),
    query: cardanoCliCommand('query', {
        protocolParameters: commandFunction('protocolParameters'),
        tip: commandFunction('tip'),
        stakeDistribution: commandFunction('stakeDistribution'),
        stakeAddressInfo: commandFunction('stakeAddressInfo'),
        utxo: commandFunction('utxo'),
        ledgerState: commandFunction('ledgerState'),
        protocolState: commandFunction('protocolState'),
        stakeSnapshot: commandFunction('stakeSnapshot'),
        poolParams: commandFunction('poolParams'),
    })(cliPath),
    stakeAddress: cardanoCliCommand('stakeAddress', {
        keyGen: commandFunction('keyGen'),
        build: commandFunction('build'),
        keyHash: commandFunction('keyHash'),
        registrationCertificate: commandFunction('registrationCertificate'),
        deregistrationCertificate: commandFunction('deregistrationCertificate'),
        delegationCertificate: commandFunction('delegationCertificate'),
    })(cliPath),
    stakePool: cardanoCliCommand('stakePool', {
        registrationCertificate: commandFunction('registrationCertificate'),
        deregistrationCertificate: commandFunction('deregistrationCertificate'),
        id: commandFunction('id'),
        metadataHash: commandFunction('metadataHash'),
    })(cliPath),
    textView: cardanoCliCommand('textView', {
        decodeCbor: commandFunction('decodeCbor'),
    })(cliPath),
    transaction: cardanoCliCommand('transaction', {
        buildRaw: commandFunction('buildRaw'),
        sign: commandFunction('sign'),
        witness: commandFunction('witness'),
        assemble: commandFunction('assemble'),
        submit: commandFunction('submit'),
        policyid: commandFunction('policyid'),
        calculateMinFee: commandFunction('calculateMinFee'),
        calculateMinValue: commandFunction('calculateMinValue'),
        txid: commandFunction('txid'),
        view: commandFunction('view'),
    })(cliPath),
});
export default cardanoCli;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBc0IsTUFBTSxXQUFXLENBQUE7QUFFbEYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7UUFDckMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUM7UUFDN0IsTUFBTSxFQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFDakMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxTQUFTLENBQUM7S0FDbkMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNYLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7UUFDckMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxlQUFlLENBQUM7UUFDL0MsY0FBYyxFQUFFLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNqRCxVQUFVLEVBQUUsZUFBZSxDQUFDLFlBQVksQ0FBQztRQUN6QyxPQUFPLEVBQUUsZUFBZSxDQUFDLFNBQVMsQ0FBQztRQUNuQyxTQUFTLEVBQUUsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUN2QyxXQUFXLEVBQUUsZUFBZSxDQUFDLGFBQWEsQ0FBQztRQUMzQyxXQUFXLEVBQUUsZUFBZSxDQUFDLGFBQWEsQ0FBQztRQUMzQyxNQUFNLEVBQUUsZUFBZSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxZQUFZLEVBQUUsZUFBZSxDQUFDLGNBQWMsQ0FBQztRQUM3QyxJQUFJLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQztLQUM3QixDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ1gsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFlBQVksRUFBRTtRQUMzQyxvQkFBb0IsRUFB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